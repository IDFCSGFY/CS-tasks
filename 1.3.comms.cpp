#include <iostream>;
using namespace std;

int main()
{
	setlocale(LC_ALL, "Russian");

		//2
	/*—ортировка выбором. ¬ыбираетс€ минимальный элемент в массиве и запоминаетс€. «атем удал€етс€, а все последующие за ним элементы сдвигаютс€ на один влево. —ам элемент заноситс€ на освободившуюс€ последнюю позицию.*/
	const int N = 10;
	int A[N], miniter;
	cout << "¬ведите массив из " << N << " чисел дл€ сортировки\n";
	for (int i = 0; i < N; i++)
	{
		cin >> A[i];
	}
	for (int i = 0; i < N; i++) //количество элементов дл€ сортировки
	{
		int minnum = A[0];
		miniter = 0;
		for (int j = 0; j < N - i; j++) //обход всех элементов дл€ вы€влени€ одного наименьшего, но исключа€ те, что уже были отсортированы (последние i элементов)
		{
			if (A[j] < minnum) 
			{ minnum = A[j]; miniter = j; } //если число меньше запомненного (переопредел€етс€ каждый раз на A[0], чтобы цикл не застр€л на том единственном наименьшем, что уже было отсортировано)
		}
		for (int j = miniter + 1; j < N; j++) //процесс сортировки. ¬се элементы после наименьшего сдвигаютс€ назад, в том числе на его старую позицию, после чего сам элемент благодар€ запоминанию переноситс€ на самую последнюю позицию массива
		{
			A[j - 1] = A[j];
		}
		A[N-1] = minnum;
		cout << "ћинимальное число: " << A[miniter] <<"\nћассив: ";
		for (int j = 0; j < N; j++) //цикл дл€ вывода отсортированного на одно число массива, дл€ показа процесса. Ќужно просто потому что такую сортировку можно было выполнить множеством способов, но по заданию необходим именно этот
		{
			cout << A[j] << " ";
		}
		cout << "\n";
	}

	system("pause");
	return 0;
}