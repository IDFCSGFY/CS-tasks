#include <iostream>;
using namespace std;

int main()
{
	setlocale(LC_ALL, "Russian");

		//2
	/*Задан массив, определить есть ли такое значение k, при котором произведения (A(1)*A(2)*…A(k)) и (A(k+1)*…*A(N)) равны.*/
	const int N = 10;
	int A[N], k = -1;
	cout << "Введите массив из " << N << " чисел для определения k, при котором A(1)*A(2)*…A(k) = A(k+1)*…*A(N) равны\n";
	for (int i = 0; i < N; i++)
	{
		cin >> A[i]; //ввод значений элементов массива
	}
	for (int i = 0; i < N - 1; i++) //счетчик этого цикла будет выступать делителем. На первом круге он равен 0, поэтому онподелит весь массив на две группы: (а[0]) и (a[1], a[2],...a[N]), на втором круге – на группы (а[0], a[1]) и (a[2],...a[N]). И т.д.. Поэтому если произведения каждой из групп равны, то i и будет являться k (отсылка к строке 29).  
	{
		int mult1 = 1, mult2 = 1; //эти две переменные будут хранить произведения каждой из двух групп, на которые будет поделен массив
		for (int j = 0; j <= i; j++) //элементы группы от 0 до i (до делителя)
		{
			mult1 *= A[j]; //все элементы группы перемножаются, их произведение записывается в переменную mult1
		}
		for (int j = i + 1; j < N; j++) //элементы группы от i+1 до N (как и в условии задачи. Только у нас i, а не k, потому что мы пока не знаем то, будет ли это деление верным)
		{
			mult2 *= A[j]; //все элементы второй группы перемножаются в mult2
		}
		if (mult1 == mult2) //если произведение элементов первой группы равно произведению элементов второй группы, то
		{ k = i; break; } //"делитель" i является искомым и равен k. Если в коде переменная i объявляется вне массива, то можно обойтись и без переменной k – при брейке цикла значение i останется прежним, можно будет использовать прямо его. У меня i определяется внутри цикла и является локальной переменной цикла, поэтому вне этого цикла я её использовать не могу – она "не существует" вне него
	}
	if (k == -1) { cout << "Значение не существует\n"; } //если значение осталось тем же, что при объявлении переменной, значит, решений нет. В данной переменной хранится номер, а потому он не может быть отрицательным. Для той же цели можно объявить отдельную переменную типа bool, в которую записывать, например, true, если решения есть, и оставить false, если их нет. По условию задачи обязательно указать лишь то, есть ли решение
	else { cout << "k = " << k+1 << "\n"; }

	system("pause");
	return 0;
}