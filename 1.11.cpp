#include <iostream>;
using namespace std;

int main()
{
	setlocale(LC_ALL, "Russian");

		//11
	/*Написать программу, которая угадывает число, которое загадал пользователь.*/

	int n, guess, min = -1, max = -1; 
	cout << "Загадайте число, чтобы программа его отгадала\n";
	cin >> n;
	while (min == -1 || max == -1)	//до тех пор, пока переменным не будет задано какое-либо значение, кроме начального -1. Дословно: если min равняется -1 или max равняется -1. "Или" [||] здесь означает, что цикл будет выполняться до тех пор, пока _хотя бы одно_ из подусловий (их два: одно на min и одно на max) правдиво. Есть также логическое сложение, которое переводят как "и" [&&], то есть до тех пор, пока _и первое, и второе_ подусловие правдивы.
	{
		guess = rand(); //переменной guess присваивается случайное значение
		cout << guess << "\n";
		if (guess > n) { max = guess; } //здесь предполагается, что число угадывается, как в обычной игре в числа, когда угадывающему говорят "больше" или "меньше". Здесь программа берёт своё больше/меньше самостоятельно. Если загаданное число меньше, чем то число, что назвала программа, то она запоминает верхнюю границу, через которую переходить будет бесполезно. Польза от этого будет во втором цикле программы
		else if (guess < n) { min = guess; } //аналогично строчке выше, но устанавливается нижняя граница. Для продолжения нужны обе границы, поэтому в условии цикла и проверяется то, были ли переназначены обе переменные
	}
	while (guess != n) //до тех пор, пока программа не угадает число
	{
		guess = min + rand() % (max - min); //программа загадывает случайное число из промежутка [min; max). Например, в промежутке [5; 8) находится три целых числа: 5, 6 и 7. В данном случае [rand() % (8 - 5)] выдаст значение от 0 до 2, поскольку при делении на 3 (т. е. 8 - 5) остаток от деления может быть 0, 1 или 2. А затем этот остаток и прибавляется к нижней границе, в примере — к пяти
		cout << guess << "\n";			//вместо случайного числа программа может также делить условный промежуток пополам и спрашивать число из середины, чтобы ускорить поиск: [guess = min + (max-min)/2]. Так программа будет буквально делить промежуток на две равные части и узнавать, в какой из них находится загаданное число
		if (guess > n) { max = guess; } //всё ещё регулировка границ. Промежуток поиска постоянно сокращается
		else if (guess < n) { min = guess; }
	}

	system("pause");
	return 0;
}
